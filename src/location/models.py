import datetime

from django.db import models
from django.utils import timezone
from item.models import Item


class HuntingZoneType(models.TextChoices):
    """–¢–∏–ø—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç."""

    LOCATION = "location", "üìç–õ–æ–∫–∞—Ü–∏—è"
    DUNGEON = "dungeon", "‚ò†Ô∏è–ü–æ–¥–∑–µ–º–µ–ª—å–µ"


class HuntingZone(models.Model):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–µ–π –∏–≥—Ä—ã."""

    name = models.CharField(max_length=32, verbose_name="–ò–º—è")
    type = models.CharField(
        max_length=16,
        choices=HuntingZoneType.choices,
        default=HuntingZoneType.LOCATION,
        verbose_name="–¢–∏–ø",
    )
    created = models.DateTimeField(
        auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
    )
    exp = models.IntegerField(
        default=1, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –≤ –º–∏–Ω—É—Ç—É"
    )
    drop = models.ManyToManyField(
        Item, through="HuntingZoneDrop", related_name="drop"
    )

    def __str__(self):
        return f"{self.get_type_display()[:1]}{self.name}"

    @property
    def name_with_type(self):
        """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π —Ç–∏–ø–∞."""
        return f"{self.get_type_display()[:1]}{self.name}"


class Location(HuntingZone):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π."""

    place = models.IntegerField(default=10, verbose_name="–ú–µ—Å—Ç –≤ –ª–æ–∫–∞—Ü–∏–∏")
    required_power = models.IntegerField(
        default=100, verbose_name="–¢—Ä–µ–±—É–µ–º–∞—è —Å–∏–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
    )

    class Meta:
        verbose_name = "–õ–æ–∫–∞—Ü–∏—è"
        verbose_name_plural = "–õ–æ–∫–∞—Ü–∏–∏"

    def __str__(self):
        return f"{self.name} | Power: {self.required_power}"

    @property
    def name_with_power(self):
        """–ò–º—è —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å–∏–ª–æ–π –∫–ª–∞–Ω–∞."""
        return f"{self.name} ‚öîÔ∏è{self.required_power}"


class HuntingZoneDrop(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä–æ–ø –ª–∏—Å—Ç–∞ –≤ –ª–æ–∫–∞—Ü–∏—è—Ö."""

    hunting_zone = models.ForeignKey(
        HuntingZone, on_delete=models.CASCADE, verbose_name="–ó–æ–Ω–∞ –û—Ö–æ—Ç—ã"
    )
    item = models.ForeignKey(
        Item, on_delete=models.CASCADE, verbose_name="–ü—Ä–µ–¥–º–µ—Ç"
    )
    min_amount = models.IntegerField(
        default=1, verbose_name="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )
    max_amount = models.IntegerField(
        default=1, verbose_name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )
    chance = models.FloatField(
        default=1, verbose_name="–®–∞–Ω—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –≤ –º–∏–Ω—É—Ç—É"
    )

    class Meta:
        verbose_name = "–î—Ä–æ–ø –≤ –∑–æ–Ω–µ –æ—Ö–æ—Ç—ã"
        verbose_name_plural = "–î—Ä–æ–ø –≤ –∑–æ–Ω–∞—Ö –æ—Ö–æ—Ç—ã"

    def __str__(self):
        return (
            f"Item: {self.item} | "
            f"Location: {self.hunting_zone} | "
            f"Amount: {self.min_amount} - {self.max_amount} | "
            f"Chance: {self.chance}"
        )


class LocationBoss(models.Model):
    """–ú–æ–¥–µ–ª—å –±–æ—Å—Å–æ–≤ –ª–æ–∫–∞—Ü–∏–π."""

    name = models.CharField(max_length=16, verbose_name="–ò–º—è")
    respawn = models.DateTimeField(
        default=timezone.now, verbose_name="–í—Ä–µ–º—è –†–µ—Å–ø–∞—É–Ω–∞"
    )
    required_power = models.IntegerField(
        default=100, verbose_name="–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å–∏–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
    )
    drop = models.ManyToManyField(
        Item, through="LocationBossDrop", related_name="location_boss_drop"
    )
    location = models.ForeignKey(
        Location, on_delete=models.CASCADE, verbose_name="–õ–æ–∫–∞—Ü–∏—è"
    )
    characters = models.ManyToManyField(
        to="character.Character", through="LocationBossCharacter"
    )

    class Meta:
        verbose_name = "–ë–æ—Å—Å –õ–æ–∫–∞—Ü–∏–∏"
        verbose_name_plural = "–ë–æ—Å—Å—ã –õ–æ–∫–∞—Ü–∏–∏"

    def __str__(self):
        return (
            f"Name: {self.name} | "
            f"Required Power: {self.required_power} | "
            f"Respawn: {self.respawn}"
        )

    @property
    def name_with_power(self):
        """–ò–º—è —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å–∏–ª–æ–π –∫–ª–∞–Ω–∞."""
        return f"{self.name} ‚öîÔ∏è{self.required_power}"


class LocationBossCharacter(models.Model):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ä–µ–π–¥–µ."""

    character = models.ForeignKey(
        to="character.Character",
        on_delete=models.CASCADE,
        verbose_name="–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤ —Ä–µ–π–¥–µ",
    )
    boss = models.ForeignKey(
        LocationBoss, on_delete=models.CASCADE, verbose_name="–ë–æ—Å—Å –ª–æ–∫–∞—Ü–∏–∏"
    )

    class Meta:
        verbose_name = "–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤ —Ä–µ–π–¥–µ"
        verbose_name_plural = "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ —Ä–µ–π–¥–µ"

    def __str__(self):
        return f"Character: {self.character} | " f"Boss: {self.boss}"


class LocationBossDrop(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä–æ–ø –ª–∏—Å—Ç–∞ –±–æ—Å—Å–æ–≤ –ª–æ–∫–∞—Ü–∏–∏."""

    boss = models.ForeignKey(
        LocationBoss, on_delete=models.CASCADE, verbose_name="–ë–æ—Å—Å –ª–æ–∫–∞—Ü–∏–∏"
    )
    item = models.ForeignKey(
        Item, on_delete=models.CASCADE, verbose_name="–ü—Ä–µ–¥–º–µ—Ç"
    )
    min_amount = models.IntegerField(
        default=1, verbose_name="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )
    max_amount = models.IntegerField(
        default=1, verbose_name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )
    chance = models.FloatField(
        default=1, verbose_name="–®–∞–Ω—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –≤ –º–∏–Ω—É—Ç—É"
    )

    class Meta:
        verbose_name = "–¢—Ä–æ—Ñ–µ–π —Å –±–æ—Å—Å–∞"
        verbose_name_plural = "–¢—Ä–æ—Ñ–µ–∏ —Å –±–æ—Å—Å–∞"

    def __str__(self):
        return f"{self.item.name_with_type} {self.chance}"


class Dungeon(HuntingZone):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π."""

    min_level = models.IntegerField(
        default=1, verbose_name="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –£—Ä–æ–≤–µ–Ω—å –ü–µ—Ä—Å–æ–Ω–∞–∂–∞"
    )
    max_level = models.IntegerField(
        default=1, verbose_name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –£—Ä–æ–≤–µ–Ω—å –ü–µ—Ä—Å–æ–Ω–∞–∂–∞"
    )
    cooldown_hours = models.IntegerField(
        default=24, verbose_name="–û–∂–∏–¥–∞–Ω–∏–µ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"
    )
    hunting_hours = models.IntegerField(
        default=4, verbose_name="–ß–∞—Å–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ö–æ—Ç—ã"
    )
    required_items = models.ManyToManyField(
        Item,
        through="DungeonRequiredItem",
        related_name="dungeon_required_items",
    )
    characters = models.ManyToManyField(
        to="character.Character",
        through="DungeonCharacter",
        related_name="dungeon_characters",
    )

    class Meta:
        verbose_name = "–ü–æ–¥–∑–µ–º–µ–ª—å–µ"
        verbose_name_plural = "–ü–æ–¥–∑–µ–º–µ–ª—å—è"

    def __str__(self):
        return f"{self.name} | Level: {self.min_level} - {self.max_level}"

    @property
    def name_with_level(self):
        """–ò–º—è —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å–∏–ª–æ–π –∫–ª–∞–Ω–∞."""
        return f"{self.name_with_type} –£—Ä. {self.min_level}-{self.max_level}"


class DungeonCharacter(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""

    dungeon = models.ForeignKey(
        Dungeon, on_delete=models.CASCADE, verbose_name="–ü–æ–¥–∑–µ–º–µ–ª—å–µ"
    )
    character = models.ForeignKey(
        to="character.Character",
        on_delete=models.CASCADE,
        verbose_name="–ü–µ—Ä—Å–æ–Ω–∞–∂",
    )
    hunting_begin = models.DateTimeField(
        default=timezone.now() - datetime.timedelta(days=364),
        verbose_name="–ù–∞—á–∞–ª–æ –æ—Ö–æ—Ç—ã",
    )


class DungeonRequiredItem(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""

    dungeon = models.ForeignKey(
        Dungeon, on_delete=models.CASCADE, verbose_name="–ü–æ–¥–∑–µ–º–µ–ª—å–µ"
    )
    item = models.ForeignKey(
        Item, on_delete=models.CASCADE, verbose_name="–ü—Ä–µ–¥–º–µ—Ç"
    )
    amount = models.IntegerField(default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
