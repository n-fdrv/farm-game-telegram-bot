import datetime

from django.db import models


class ItemType(models.TextChoices):
    """–¢–∏–ø—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç."""

    ARMOR = "armor", "üõ°–ë—Ä–æ–Ω—è"
    BRACELET = "bracelet", "üíç–ë—Ä–∞—Å–ª–µ—Ç"
    BOOK = "book", "üìï–ö–Ω–∏–≥–∞"
    WEAPON = "weapon", "‚öîÔ∏è–û—Ä—É–∂–∏–µ"
    POTION = "potion", "üå°–≠–ª–∏–∫—Å–∏—Ä"
    TALISMAN = "talisman", "‚≠êÔ∏è–¢–∞–ª–∏—Å–º–∞–Ω"
    RECIPE = "recipe", "üìï–†–µ—Ü–µ–ø—Ç"
    MATERIAL = "material", "ü™µ–†–µ—Å—É—Ä—Å"
    SCROLL = "scroll", "üìú–°–≤–∏—Ç–æ–∫"
    BAG = "bag", "üì¶–ú–µ—à–æ–∫"
    ETC = "etc", "–†–∞–∑–Ω–æ–µ"


class EquipmentType(models.TextChoices):
    """–¢–∏–ø—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏."""

    HEAVY_ARMOR = "heavy_armor", "–¢—è–∂–µ–ª–∞—è –ë—Ä–æ–Ω—è"
    LIGHT_ARMOR = "light_armor", "–õ–µ–≥–∫–∞—è –ë—Ä–æ–Ω—è"
    ROBE_ARMOR = "robe", "–ú–∞–Ω—Ç–∏—è"

    SWORD = "sword", "–ú–µ—á"
    STAFF = "staff", "–ü–æ—Å–æ—Ö"
    BLUNT = "blunt", "–î—É–±–∏–Ω–∞"
    DAGGER = "dagger", "–ö–∏–Ω–∂–∞–ª"

    BRACELET = "bracelet", "–ë—Ä–∞—Å–ª–µ—Ç"


class EffectProperty(models.TextChoices):
    """–¢–∏–ø—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤."""

    ATTACK = "attack", "Ô∏è‚öîÔ∏è–ê—Ç–∞–∫–∞"
    DEFENCE = "defence", "üõ°–ó–∞—â–∏—Ç–∞"
    HEALTH = "health", "‚ù§Ô∏è–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ó–¥–æ—Ä–æ–≤—å—è"
    MAX_HEALTH = "max_health", "‚ù§Ô∏è–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ó–¥–æ—Ä–æ–≤—å—è"
    MANA = "mana", "üî∑–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ú–∞–Ω—ã"
    MAX_MANA = "max_mana", "üî∑–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ú–∞–Ω—ã"
    EXP = "exp", "üîÆ–û–ø—ã—Ç"
    DROP = "drop", "üçÄ–í—ã–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
    HUNTING_TIME = "hunting_time", "‚è≥–í—Ä–µ–º—è –æ—Ö–æ—Ç—ã"
    PVP = "pvp", "ü©∏–£—Ä–æ–Ω –≤ PvP"
    TALISMAN_AMOUNT = "talisman_amount", "‚≠êÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–∞–ª–∏—Å–º–∞–Ω–æ–≤"
    MASS_ATTACK = "mass_attack", "‚ö°Ô∏è–ú–∞—Å—Å–æ–≤–∞—è –ê—Ç–∞–∫–∞"
    NO_DEATH_EXP = "no_death_exp", "ü™¶–ë–µ–∑ –ø–æ—Ç–µ—Ä–∏ –æ–ø—ã—Ç–∞ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏"
    EVASION = "evasion", "ü•æ–£–∫–ª–æ–Ω–µ–Ω–∏–µ"
    INVISIBLE = "invisible", "üí®–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å"


class EffectSlug(models.TextChoices):
    """Slug —ç—Ñ—Ñ–µ–∫—Ç–æ–≤."""

    POTION = "potion", "üå°–≠–ª–∏–∫—Å–∏—Ä"
    SKILL = "skill", "‚ÜóÔ∏è–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"
    ITEM = "item", "üéí–ü—Ä–µ–¥–º–µ—Ç"
    FATIGUE = "fatigue", "‚ô¶Ô∏è–£—Å—Ç–∞–ª–æ—Å—Ç—å"


class Item(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤."""

    name = models.CharField(max_length=32, verbose_name="–ò–º—è")
    description = models.CharField(
        max_length=256,
        default="–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞",
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ",
    )
    buy_price = models.IntegerField(
        default=0, verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏"
    )
    sell_price = models.IntegerField(
        default=0, verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏"
    )
    created = models.DateTimeField(
        auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
    )
    type = models.CharField(
        max_length=16,
        choices=ItemType.choices,
        default=ItemType.ETC,
        verbose_name="–¢–∏–ø",
    )
    effects = models.ManyToManyField(
        "Effect", through="ItemEffect", verbose_name="–≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
    )

    class Meta:
        verbose_name = "–ü—Ä–µ–¥–º–µ—Ç"
        verbose_name_plural = "–ü—Ä–µ–¥–º–µ—Ç—ã"

    def __str__(self):
        if self.type == ItemType.ETC:
            return f"{self.name}"
        return f"{self.get_type_display()[:1]}{self.name}"

    @property
    def name_with_type(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.type == ItemType.ETC:
            return f"{self.name}"
        return f"{self.get_type_display()[:1]}{self.name}"

    @property
    def emoji(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.type == ItemType.ETC:
            return f"{self.name[:1]}"
        return f"{self.get_type_display()[:1]}"


class Equipment(Item):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞–¥–µ–≤–∞—Ç—å."""

    equipment_type = models.CharField(
        max_length=16,
        choices=EquipmentType.choices,
        default=EquipmentType.HEAVY_ARMOR,
        verbose_name="–í–∏–¥ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏",
    )

    class Meta:
        verbose_name = "–ë—Ä–æ–Ω—è"
        verbose_name_plural = "–ë—Ä–æ–Ω—è"


class Armor(Equipment):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏."""

    pass

    class Meta:
        verbose_name = "–ë—Ä–æ–Ω—è"
        verbose_name_plural = "–ë—Ä–æ–Ω—è"


class Weapon(Equipment):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä—É–∂–∏—è."""

    pass

    class Meta:
        verbose_name = "–û—Ä—É–∂–∏–µ"
        verbose_name_plural = "–û—Ä—É–∂–∏—è"


class Bracelet(Equipment):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä—É–∂–∏—è."""

    pass

    class Meta:
        verbose_name = "–ë—Ä–∞—Å–ª–µ—Ç"
        verbose_name_plural = "–ë—Ä–∞—Å–ª–µ—Ç—ã"


class Talisman(Item):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–ª–∏—Å–º–∞–Ω–æ–≤."""

    talisman_type = models.CharField(
        max_length=16,
        choices=EffectProperty.choices,
        default=EffectProperty.ATTACK,
        verbose_name="–í–∏–¥ —Ç–∞–ª–∏—Å–º–∞–Ω–∞",
    )

    class Meta:
        verbose_name = "–¢–∞–ª–∏—Å–º–∞–Ω"
        verbose_name_plural = "–¢–∞–ª–∏—Å–º–∞–Ω—ã"


class Potion(Item):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–∏—Ç–∫–æ–≤."""

    effect_time = models.TimeField(
        default=datetime.time(hour=12), verbose_name="–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è"
    )

    class Meta:
        verbose_name = "–≠–ª–∏–∫—Å–∏—Ä"
        verbose_name_plural = "–≠–ª–∏–∫—Å–∏—Ä—ã"


class Scroll(Item):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–∏—Ç–∫–æ–≤."""

    enhance_type = models.CharField(
        max_length=16,
        choices=ItemType.choices,
        default=ItemType.WEAPON,
        verbose_name="–£–ª—É—á—à–∞–µ–º—ã–π —Ç–∏–ø",
    )

    class Meta:
        verbose_name = "–°–≤–∏—Ç–æ–∫"
        verbose_name_plural = "–°–≤–∏—Ç–∫–∏"


class Material(Item):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤."""

    pass

    class Meta:
        verbose_name = "–†–µ—Å—É—Ä—Å"
        verbose_name_plural = "–†–µ—Å—É—Ä—Å—ã"


class Book(Item):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥."""

    character_class = models.ForeignKey(
        to="character.CharacterClass",
        on_delete=models.CASCADE,
        verbose_name="–¢—Ä–µ–±—É–µ–º—ã–π –∫–ª–∞—Å—Å",
        null=True,
        blank=True,
    )
    required_level = models.IntegerField(
        default=1, verbose_name="–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å"
    )
    required_skill = models.ForeignKey(
        to="character.Skill",
        on_delete=models.CASCADE,
        verbose_name="–¢—Ä–µ–±—É–µ–º–æ–µ —É–º–µ–Ω–∏–µ",
        null=True,
        blank=True,
        related_name="book_required",
    )
    skill = models.ForeignKey(
        to="character.Skill",
        on_delete=models.CASCADE,
        verbose_name="–ü–æ–ª—É—á–∞–µ–º–æ–µ —É–º–µ–Ω–∏–µ",
        null=True,
        blank=True,
        related_name="book_give",
    )

    class Meta:
        verbose_name = "–ö–Ω–∏–≥–∞"
        verbose_name_plural = "–ö–Ω–∏–≥–∏"


class Recipe(Item):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤."""

    level = models.IntegerField(default=1, verbose_name="–£—Ä–æ–≤–µ–Ω—å")
    chance = models.IntegerField(default=100, verbose_name="–®–∞–Ω—Å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
    create = models.ForeignKey(
        Item,
        on_delete=models.CASCADE,
        verbose_name="–ò–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç",
        related_name="recipe_create",
    )

    class Meta:
        verbose_name = "–†–µ—Ü–µ–ø—Ç"
        verbose_name_plural = "–†–µ—Ü–µ–ø—Ç—ã"

    def __str__(self):
        return f"{self.name} ({self.chance}%) (–£—Ä. {self.level})"

    @property
    def name_with_chance(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Å —à–∞–Ω—Å–æ–º."""
        return f"{self.name_with_type} ({self.chance}%)"


class Etc(Item):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤."""

    pass

    class Meta:
        verbose_name = "–†–∞–∑–Ω–æ–µ"
        verbose_name_plural = "–†–∞–∑–Ω–æ–µ"


class Bag(Item):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—à–∫–æ–≤."""

    pass

    class Meta:
        verbose_name = "–ú–µ—à–æ–∫"
        verbose_name_plural = "–ú–µ—à–∫–∏"


class BagItem(models.Model):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–µ—à–∫–µ."""

    item = models.ForeignKey(
        Item,
        on_delete=models.RESTRICT,
        verbose_name="–í–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç",
        related_name="item_in_bag",
    )
    bag = models.ForeignKey(
        Bag,
        on_delete=models.RESTRICT,
        verbose_name="–ú–µ—à–æ–∫",
        related_name="bag_items",
    )
    chance = models.IntegerField(default=1, verbose_name="–®–∞–Ω—Å")
    amount = models.IntegerField(default=1, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    class Meta:
        verbose_name = "–ü—Ä–µ–¥–º–µ—Ç –≤ –º–µ—à–∫–µ"
        verbose_name_plural = "–ü—Ä–µ–¥–º–µ—Ç—ã –≤ –º–µ—à–∫–µ"

    def __str__(self):
        return f"Bag: {self.bag} | Item: {self.item} | Chance: {self.chance}%"


class Effect(models.Model):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤."""

    property = models.CharField(
        max_length=16,
        choices=EffectProperty.choices,
        default=EffectProperty.ATTACK,
        verbose_name="–°–≤–æ–π—Å—Ç–≤–æ",
    )
    amount = models.IntegerField(default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    in_percent = models.BooleanField(default=False, verbose_name="–í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö")
    slug = models.CharField(
        max_length=16,
        choices=EffectSlug.choices,
        default=EffectSlug.POTION,
        verbose_name="–í–∏–¥ —ç—Ñ—Ñ–µ–∫—Ç–∞",
    )

    class Meta:
        verbose_name = "–≠—Ñ—Ñ–µ–∫—Ç"
        verbose_name_plural = "–≠—Ñ—Ñ–µ–∫—Ç—ã"

    def __str__(self):
        item = (
            Item.objects.values_list("name", flat=True)
            .filter(effects=self)
            .all()
        )
        text = (
            f"{' | '.join(item)} -"
            f" {self.get_property_display()}: {self.amount}"
        )
        if self.in_percent:
            text += "%"
        return text

    def get_property_with_amount(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º."""
        amount = f": <b>{self.amount}</b>"
        if not self.amount and self.in_percent:
            amount = ""
        text = f"{self.get_property_display()} {amount}"
        if self.in_percent and amount:
            text += "%"
        return text


class ItemEffect(models.Model):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤."""

    item = models.ForeignKey(
        Item, on_delete=models.RESTRICT, verbose_name="–ü—Ä–µ–¥–º–µ—Ç"
    )
    effect = models.ForeignKey(
        Effect, on_delete=models.RESTRICT, verbose_name="–≠—Ñ—Ñ–µ–∫—Ç"
    )

    class Meta:
        verbose_name = "–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞"
        verbose_name_plural = "–≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤"

    def __str__(self):
        return f"{self.item} {self.effect}"


class CraftingItem(models.Model):
    """–ú–æ–¥–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞."""

    material = models.ForeignKey(
        to=Item,
        on_delete=models.RESTRICT,
        verbose_name="–ü—Ä–µ–¥–º–µ—Ç",
        related_name="recipes",
    )
    recipe = models.ForeignKey(
        to=Recipe,
        on_delete=models.CASCADE,
        verbose_name="–†–µ—Ü–µ–ø—Ç",
        related_name="materials",
    )
    amount = models.IntegerField(default=1, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    class Meta:
        verbose_name = "–ü—Ä–µ–¥–º–µ—Ç –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏"
        verbose_name_plural = "–ü—Ä–µ–¥–º–µ—Ç—ã –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"

    def __str__(self):
        return f"{self.recipe} | {self.material.name}"
